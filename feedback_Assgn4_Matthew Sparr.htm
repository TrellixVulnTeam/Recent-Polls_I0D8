{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <center> Matthew Sparr\n",
    "## <center> Predictive Analytics 1: Python\n",
    "## <center> Assignment 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import necessary libraries and import data, dropping uneccesary columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.preprocessing import scale\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('UniversalBank.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Family</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Education</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>91107</td>\n",
       "      <td>4</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>45</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "      <td>90089</td>\n",
       "      <td>3</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>94720</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>100</td>\n",
       "      <td>94112</td>\n",
       "      <td>1</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>91330</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID  Age  Experience  Income  ZIP Code  Family  CCAvg  Education  Mortgage  \\\n",
       "0   1   25           1      49     91107       4    1.6          1         0   \n",
       "1   2   45          19      34     90089       3    1.5          1         0   \n",
       "2   3   39          15      11     94720       1    1.0          1         0   \n",
       "3   4   35           9     100     94112       1    2.7          2         0   \n",
       "4   5   35           8      45     91330       4    1.0          2         0   \n",
       "\n",
       "   Personal Loan  Securities Account  CD Account  Online  CreditCard  \n",
       "0              0                   1           0       0           0  \n",
       "1              0                   1           0       0           0  \n",
       "2              0                   0           0       0           0  \n",
       "3              0                   0           0       0           0  \n",
       "4              0                   0           0       0           1  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(['ID', 'ZIP Code'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5000 entries, 0 to 4999\n",
      "Data columns (total 12 columns):\n",
      "Age                   5000 non-null int64\n",
      "Experience            5000 non-null int64\n",
      "Income                5000 non-null int64\n",
      "Family                5000 non-null int64\n",
      "CCAvg                 5000 non-null float64\n",
      "Education             5000 non-null int64\n",
      "Mortgage              5000 non-null int64\n",
      "Personal Loan         5000 non-null int64\n",
      "Securities Account    5000 non-null int64\n",
      "CD Account            5000 non-null int64\n",
      "Online                5000 non-null int64\n",
      "CreditCard            5000 non-null int64\n",
      "dtypes: float64(1), int64(11)\n",
      "memory usage: 468.8 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check for null or missing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age                   0\n",
       "Experience            0\n",
       "Income                0\n",
       "Family                0\n",
       "CCAvg                 0\n",
       "Education             0\n",
       "Mortgage              0\n",
       "Personal Loan         0\n",
       "Securities Account    0\n",
       "CD Account            0\n",
       "Online                0\n",
       "CreditCard            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Split into X and Y. Normalization of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Matthew\\Anaconda3\\lib\\site-packages\\sklearn\\preprocessing\\data.py:323: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by MinMaxScaler.\n",
      "  return self.partial_fit(X, y)\n"
     ]
    }
   ],
   "source": [
    "X = df.drop('Personal Loan', axis=1)\n",
    "Y = df['Personal Loan']\n",
    "scaler = MinMaxScaler()\n",
    "X_scaled = scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train size of 0.6 and validation size of 0.4 with random_state=1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Matthew\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2069: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "x_train, x_val, y_train, y_val = train_test_split(X_scaled, Y,train_size=0.6, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1\n",
    "Perform a k-NN classification with all predictors except ID and ZIP code. Compute and report the accuracies (also called correct rates) in the validation set for odd kâ€™s up to 19 (i.e., k = 1, 3, â€¦, 19). What is the best choice of k?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_values = [i for i in range(20) if i%2!=0]\n",
    "scores = []\n",
    "for k in k_values:\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn.fit(x_train, y_train)\n",
    "    scores.append((k, knn.score(x_val, y_val)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(1, 0.958),\n",
       " (3, 0.9545),\n",
       " (5, 0.951),\n",
       " (7, 0.947),\n",
       " (9, 0.946),\n",
       " (11, 0.943),\n",
       " (13, 0.94),\n",
       " (15, 0.937),\n",
       " (17, 0.9365),\n",
       " (19, 0.9345)]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The accuracies for the different K values are all similar. Still, the best value of K appears to be <b>1</b>."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "k=1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Points: 3/4\n",
    "### Comment: Your accuracy scores differ from the expected accuracy scores as per model answers. Please check your code again. It seems that you have obtained knn.scores() which gives accuracy scores for classification algorithms. This problem is not for prediction but is for classification. So the scores may be different. We want to obtain accuracy values for kNN classification model so we get best accuracy values using function accuracy_score. Please refer to the code given in model answers for the same. The best classification model has best accuracy score of 0.9575 at k = 5."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2\n",
    "Using the best k, make predictions in the validation set. Based on the numbers in the confusion matrix, explain how are the sensitivity and specificity calculated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=19, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_best = KNeighborsClassifier(n_neighbors=k)\n",
    "knn_best.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1801,    6],\n",
       "       [ 125,   68]], dtype=int64)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = knn_best.predict(x_val)\n",
    "cm = confusion_matrix(y_val, y_pred)\n",
    "true_negative, false_positive, false_negative, true_positive = cm.ravel()\n",
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x245da1a7f60>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(cm, annot=True, cmap='Blues', fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sensitivity = Number of true positives /(Number of true positives + Number of false negatives)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.35233160621761656"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sensitivity = true_positive/(true_positive+false_negative)\n",
    "sensitivity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Specificity = Number of true negatives /(Number of true negatives + number of false positives)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9966795794133924"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "specificity = true_negative/(true_negative+false_positive)\n",
    "specificity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our classifier has high specificity but low sensitivity. This means that it is really good at accurately predicting those who will not take a loan offer but is not so good at accurately predicting those who will take a loan offer."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Points: 2/3\n",
    "### Comment: As for k = 5 the accuracy score is the highest, the specificity would be 0.9961 and sensitivity would be 0.9575 approximately."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3 \n",
    "Classify a new customer with the following profile: Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 2, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1. Make sure that the column order for dataframe describing the new customer matches the column order in the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Age', 'Experience', 'Income', 'Family', 'CCAvg', 'Education',\n",
       "       'Mortgage', 'Securities Account', 'CD Account', 'Online',\n",
       "       'CreditCard'], dtype=object)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create new customer data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_customer = pd.DataFrame([[40,10,84,2,2,2,0,0,0,1,1]], columns=X.columns.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normalize new customer data with same scaler as used on the training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_customer_scaled = scaler.transform(new_customer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_customer_pred = knn_best.predict(new_customer_scaled)\n",
    "new_customer_pred[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This new customer likely not accept a loan offer."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Points: 2/2\n",
    "### Comment: Though your model differs in accuracy and sensitivity the predicted class of new customer is correct as per model answers. \n",
    "\n",
    "### If you have any conceptual or software related queries please do not hesitate to post them to the discussion board. The instructor will guide you with his expert comments. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
